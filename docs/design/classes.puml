@startuml RiskDesign

package presentation {
    +class RiskApp {
        -cssFileString: String
        -iconImageString: String

        +start(stage: Stage): void
        -loadStartScreen(): Parent
        -loadUniversalFiles(): void
        -initializeScreen(root: Parent, stage: Stage): void
        -addCssFileToScene(cssFileString: String, sceneInQuestion: Scene): Scene
        -addKeyListenerToScene(scene: Scene): Scene
        -performStageSetup(stage: Stage): void
        +{static} main(args: String[]): void
    }

    ~enum SceneType {
        START
        PLAYER_SELECT
        SHUFFLE
        GAME_OVER
        WIN

        -{final} sceneName: String
        ~SceneType(sceneName: String)
        ~getSceneName(): String
    }

    +class GameMapScreenController {
        -claimTerritoryDialog: DialogPane
        -territoryErrorDialog: DialogPane
        -armyPlacementSelectionDialog: DialogPane
        -attackResultsDialog: DialogPane
        -generalMessageDialog: DialogPane
        -tradeInDialog: DialogPane
        -extraArmiesDialog: DialogPane
        -dialogBackground: AnchorPane
        -armiesToPlacePane: AnchorPane
        -currentPlayerColor: Label
        -currentPhase: Label
        -instructionLabel: Label
        -armiesToPlace: Label
        -attackerRollsLabel: Label
        -defenderRollsLabel: Label
        -attackResultsLabel: Label
        -attackFortifySkipButton: Button
        -tradeInButton: Button
        -armyCountSpinner: Spinner<Integer>
        -gameEngine: WorldDominationGameEngine
        -selectedTerritory: TerritoryType
        -selectedButton: Button
        -territoryButtonMap: Map<Button, TerritoryType>
        -attackLogic: AttackLogic
        -fortifyLogic: FortifyLogic
        -tradeInLogic: TradeInLogic
        -errorDialogController: Dialog
        -confirmDialogController: Dialog
        -selectDialogController: Dialog
        -attackResultsDialogController: Dialog
        -generalMessageDialogController: Dialog
        -extraArmiesDialogController: Dialog
        -placementStarted: Boolean

        -initialize(): void
        -setupDialogControllers(): void
        -setupDialogButtons(): void
        -setupSkipButton(): void
        -handleAttackButtonClick(): void
        -handleFortifyButtonClick(): void
        -setupClaimTerritoryDialog(): void
        -setupErrorDialog(): void
        -setupArmyPlacementDialog(): void
        -setupAttackResultsDialog(): void
        -promptForAdditionalArmyTransfer(): void
        -setupGeneralMessageDialog(): void
        -setupExtraArmiesDialog(): void
        -getTerritoryTypeFromString(territory: String): TerritoryType
        -setupTradeInButton(): void
        -handleSelectionDialogAction(value: int): void
        -attackPhaseLogic(value: int): void
        -transferArmiesAttackPhase(value: int): void
        -handleArmyTransfer(result: FortifyResult): void
        -performAttack(value: int): void
        -handleAttackErrors(result: AttackResult): void
        -displayResults(): void
        -displayAttackerResults(): void
        -displayDefenderResults(): void
        -displayAttackResults(): void
        -displayExtraArmiesChoice(): void
        -checkForLoss(): void
        -checkForWin(): void
        -fortifyPhaseLogic(value: int): void
        -updateStateLabels(): void
        -gamePhaseActions(currentPhase: GamePhase): void
        -handleScramblePhaseInstructions(): void
        -handleSetupPhaseInstructions(): void
        -handlePlacementPhaseInstructions(): void
        -handleAttackPhaseInstructions(sourceSelected: boolean): void
        -handleFortifyPhaseInstructions(sourceSelected: boolean): void
        -handleExtraArmies(): void
        -enablePlacement(): void
        -getTerritoryOwner(territory: TerritoryType): PlayerColor
        -handleClaimTerritory(): void
        -setButtonBackgroundColor(player: PlayerColor, button: Button): void
        -handleTerritoryButtonClick(event: ActionEvent): void
        -handleGamePhaseAction(currentPhase: GamePhase): void
        -handlePlacementAttackFortifyPhases(currentPhase: GamePhase): void
        -handlePlaceArmies(armies: int): void
        -selectPlacementErrorMessage(message: String): void
        -showErrorMessage(key: String): void
        -showArmyTransferError(result: FortifyResult): void
        -tradeIn(): void
        -tradeInErrorAction(): void
        -prepareStates(): void
        -handlePlacement(): void
        -handleAttack(): void
        -handleFortify(): void
        -handleFortifyAction(): void
        -resetSelectionDialog(startingValue: int): void
        -handleTargetTerritorySelection(): void
        -getArmiesForAttack(): void
        -getArmiesForDefense(): void
        -updateTerritoryErrorDialog(error: String): void
        -onKeyPress(event: KeyEvent): void
    }

    GameMapScreenController ..|> GameScene
    GameMapScreenController --> Dialog
    GameMapScreenController --> FortifyLogic
    GameMapScreenController --> AttackLogic
    GameMapScreenController ..> FortifyResult
    GameMapScreenController ..> AttackResult
    GameMapScreenController ..> SceneType
    GameMapScreenController --> TradeInLogic

    +class PlayerSelectScreenController {
        -{static}{final} MIN_PLAYERS: int
        -{static}{final} MAX_PLAYERS: int
        -instructionLabel: Label
        -startGameButton: Button
        -resetButton: Button
        -blackButton: Button
        -redButton: Button
        -yellowButton: Button
        -blueButton: Button
        -greenButton: Button
        -purpleButton: Button
        ~playersOrder: List<PlayerColor>
        ~controller: SceneController

        -initialize(): void
        -onBackButtonClick(): void
        -onResetButtonClick(): void
        -resetButtonStates(): void
        -resetPlayerButton(button: Button): void
        -onStartGameButtonClick(): void
        -onPlayerSelect(e: ActionEvent): void
        -handlePlayerSelectUpdate(button: Button): void
        -updateInstructionLabel(): void
        +onKeyPress(event: KeyEvent): void
    }

    PlayerSelectScreenController ..|> GameScene
    PlayerSelectScreenController --> SceneController
    PlayerSelectScreenController ..> SceneType

    +class PlayerShuffleScreenController {
        -instructionLabel: Label
        -dieRollResult: Label
        -rollOrderLabel: Label
        -dieImage: ImageView
        -startGameButton: Button
        -{final} sceneController: SceneController
        -originalPlayerOrder: List<PlayerColor>
        -updatedPlayerOrder: List<PlayerColor>
        -dieRolls: List<Integer>
        -currentPlayer: int

        -initialize(): void
        -prepareCurrentPlayerRoll(): void
        -prepareStartGame(): void
        -stringifyPlayerOrder(): void
        -rollDie(): void
        -startGame(): void
        +onKeyPress(event: KeyEvent): void
    }

    PlayerShuffleScreenController ..|> GameScene
    PlayerShuffleScreenController ..> SceneType

    -enum DieImage {
        ONE
        TWO
        THREE
        FOUR
        FIVE
        SIX

        -{static}{final} dieMap: Map<Integer, DieImage>
        -{static}get(roll: int): Image
    }

    PlayerShuffleScreenController --+ DieImage

    ~class SceneController {
        -{static} sceneController: SceneController
        -{static} languageName: String
        -{static} currentScene: GameScene
        -{final} screenMap: Map<SceneType, Pane>
        -{final} main: Scene
        -gameEngine: WorldDominationGameEngine
        -originalPlayerOrder: List<PlayerColor>
        -numberOfPlayers: int
        -winner: PlayerColor

        -SceneController(main: Scene)
        #add(scene: SceneType, pane: Pane): void
        #activate(scene: SceneType): void
        #initializePlayers(players: List<PlayerColor>): void
        #getGameEngine(): WorldDominationGameEngine
        #getOriginalPlayerOrder(): List<PlayerColor>
        #onKeyPress(event: KeyEvent): void
        #getNumberOfPlayers(): int
        #setWinner(winner: PlayerColor): void
        #getWinner(): PlayerColor
        #{static} setCurrentScene(scene: GameScene): void
        #{static} setRoot(scene: Scene): void
        #{static} getInstance(): SceneController
        #{static} setLanguage(language: String): void
        #{static} getLanguageBundle(): ResourceBundle
        #{static} getLanguage(): String
        #{static} initializeLanguageBundle(): void
        #{static} getString(key: String, format: Object[]): String
    }

    SceneController --> GameScene
    SceneController ..> SceneType

    +class AttackLogic {
        -{final} gameEngine: WorldDominationGameEngine
        -sourceTerritory: TerritoryType
        -targetTerritory: TerritoryType
        -attackArmies: int
        -defendArmies: int
        -targetOwner: PlayerColor
        -sourceSelected: boolean
        -attackArmiesSet: boolean
        -ownerSelected: boolean
        -attackComplete: boolean

        ~AttackLogic(gameEngine: WorldDominationGameEngine)
        ~performAttack(): AttackResult
        ~isSourceSelected(): boolean
        ~sourceArmiesSelected(): boolean
        ~setSourceTerritory(territory: TerritoryType): boolean
        ~setTargetTerritory(territory: TerritoryType): boolean
        ~setAttackArmies(armies: int): void
        ~setDefendArmies(armies: int): void
        ~reset(): void
        ~getTargetOwner(): PlayerColor
        ~didDefenderLoseTerritory(): boolean
        ~getSourceTerritory(): TerritoryType
        ~getTargetTerritory(): TerritoryType
        ~isAttackComplete(): boolean
    }

    +enum AttackResult {
        SUCCESS
        NOT_ADJACENT
        SOURCE_NOT_OWNED
        DESTINATION_OWNED
        WRONG_STATE
        BAD_ATTACK_ARMIES
        BAD_DEFEND_ARMIES
        NOT_ENOUGH_ATTACKERS
        NOT_ENOUGH_DEFENDERS

        ~toKey(): String
        ~{static} parseError(message: String): AttackResult
    }

    AttackLogic ..> AttackResult

    ~class Dialog {
        -{final} dialog: DialogPane
        -{final} dialogBackground: AnchorPane
        -{final} events: Map<ButtonType, EventHandler<Event>>

        #Dialog(dialog: DialogPane, background: AnchorPane)
        ~isVisible(): boolean
        ~toggleDisplay(): void
        ~setTitleText(key: String, replacements: Object[]): void
        ~setContentText(key: String, replacements: Object[]): void
        ~setupButton(buttonType: ButtonType, key: String, eventHandler: EventHandler<Event>): void
        -showButton(button: ButtonType): void
        -hideButton(button: ButtonType): void
        ~setDialogContent(content: Node): void
        ~getDialog(): DialogPane
    }

    +class FortifyLogic {
        -{final} gameEngine: WorldDominationGameEngine
        -sourceTerritory: TerritoryType
        -destinationTerritory: TerritoryType
        -armiesToTransfer: int
        -sourceSelected: boolean

        ~FortifyLogic(gameEngine: WorldDominationGameEngine)
        ~setSourceTerritory(territory: TerritoryType): void
        ~setDestinationTerritory(territory: TerritoryType): void
        ~setArmiesToTransfer(armies: int): void
        ~performFortify(): FortifyResult
        ~isSourceSelected(): boolean
        ~reset(): void
    }

    +enum FortifyResult {
        SUCCESS
        NOT_ADJACENT
        NOT_OWNED
        NOT_ENOUGH_ARMIES
        WRONG_PHASE

        ~toKey(): String
        ~{static} parseError(message: String): FortifyResult
    }

    FortifyLogic ..> FortifyResult

    +interface GameScene {
        ~onKeyPress(event: KeyEvent): void
    }

    SceneController --> "*" SceneType

    +class StartScreenController {
        -languageSelect: ComboBox<String>

        -initialize(): void
        -onStartButtonClick(): void
        +onKeyPress(event: KeyEvent): void
    }

    StartScreenController ..|> GameScene

    +class WinScreenController {
        -winLabel: Label

        -initialize(): void
        -onPlayAgain(): void
        +onKeyPress(event: KeyEvent): void
    }

    +class TradeInLogic {
        -{static}{final} TRADE_IN_COUNT: int
        -{final} tradeInDialog: Dialog
        -{final} CheckComboBox<String>: cardSelection
        -{final} EventHandler<Event> performTradeIn
        -extraArmyTerritories: Set<TerritoryType>
        -playerCards: Set<Card>

        ~TradeInLogic(tradeInDialog: Dialog, gameEngine: WorldDominationGameEngine, performTradeIn: EventHandler<Event>)
        ~displayIfEnoughCards(): void
        -shouldForceInAttackPhase(): boolean
        -hideCancelButtonOnForced(): void
        -displayListOfCards(): void
        -iterateThroughCards(cards: Set<Card>): void
        -createDisplayCard(card: Card): void
        -getTerritoryType(card: Card): void
        -getPieceType(card: Card): void
        -setupDialogButtons(): void
        ~tradeIn(): boolean
        -getCardFromString(cardString: String): Card
        -getTerritoryCardFromString(cardString: String): Card
        ~getExtraArmyTerritories(): Set<TerritoryType>
    }

    TradeInLogic --> Dialog

    WinScreenController ..|> GameScene

    PlayerShuffleScreenController --> SceneController
    PlayerSelectScreenController --> SceneController
    GameMapScreenController ..> SceneController
    StartScreenController ..> SceneController
    WinScreenController ..> SceneController
    TradeInLogic ..> SceneController
    RiskApp ..> SceneController
}

package domain {
    +class WorldDominationGameEngine {
        -{static}{final} MINIMUM_NUM_PLAYERS: int
        -{static}{final} MAXIMUM_NUM_PLAYERS: int
        -{static}{final} MAXIMUM_ARMIES_POSSIBLE_IN_SETUP: int
        -{static}{final} ADDITIONAL_PLAYER_ARMY_OFFSET: int
        -{static}{final} PLAYER_LIST_SIZE_OFFSET: int
        -{static}{final} INITIAL_NUM_UNCLAIMED_TERRITORIES: int
        -{static}{final} REQUIRED_NUM_TERRITORIES_TO_EARN_MORE_THAN_THREE_ARMIES: int
        -{static}{final} THREE_ARMIES: int
        -{static}{final} REQUIRED_TERRITORIES_PER_EXTRA_ARMY: int
        -{static}{final} FORCED_CARD_TURN_IN_THRESHOLD: int
        -{static}{final} ATTACK_PHASE_FORCED_CARD_TURN_IN_THRESHOLD: int
        -{static}{final} MINIMUM_NUMBER_OF_ATTACKING_ARMIES: int
        -{static}{final} MAXIMUM_NUMBER_OF_ATTACKING_ARMIES: int
        -{static}{final} MINIMUM_NUMBER_OF_DEFENDING_ARMIES: int
        -{static}{final} MAXIMUM_NUMBER_OF_DEFENDING_ARMIES: int
        -{static}{final} TRADE_IN_BONUS_ARMIES: int

        -playersList: List<PlayerColor>
        -playersMap: Map<PlayerColor, Player>
        -currentPlayer: PlayerColor
        -numUnclaimedTerritoriesLeft: int
        -totalUnplacedArmiesLeft: int
        -territoryGraph: TerritoryGraph
        -currentGamePhase: GamePhase
        -dieRollParser: DieRollParser
        -tradeInParser: TradeInParser
        -dieRolls: List<Integer>
        -attackerRolls: List<Integer>
        -defenderRolls: List<Integer>
        -battleResults: List<BattleResult>
        -recentlyAttackedSource: TerritoryType
        -recentlyAttackedDest: TerritoryType
        -currentPlayerCanClaimCard: boolean
        -cardDeck: RiskCardDeck

        +WorldDominationGameEngine(playerOrder: List<PlayerColor>)
        ~WorldDominationGameEngine(playerOrder: List<PlayerColor>, parser: DieRollParser)
        -handleOtherDependentObjectCreation(parser: DieRollParser): void
        -initializeGraph(): boolean
        -addAllEdgesToTerritoryGraph(): void

        -addNorthAmericanGraphEdges(): void
        -addAlaskaEdges(): void
        -addNorthwestTerritoryEdges(): void
        -addGreenlandEdges(): void
        -addAlbertaEdges(): void
        -addOntarioEdges(): void
        -addRemainingNorthAmericanGraphEdges(): void
        -addQuebecEdges(): void
        -addWesternUnitedStatesEdges(): void
        -addEasternUnitedStatesEdges(): void
        -addCentralAmericaEdges(): void

        -addSouthAmericanGraphEdges(): void
        -addVenezuelaEdges(): void
        -addPeruEdges(): void
        -addBrazilEdges(): void

        -addAfricanGraphEdges(): void
        -addNorthAfricaEdges(): void
        -addEgyptEdges(): void
        -addCongoEdges(): void
        -addEastAfricaEdges(): void
        -addSouthAfricaEdges(): void

        -addEuropeanGraphEdges(): void
        -addGreatBritainEdges(): void
        -addIcelandEdges(): void
        -addScandinaviaEdges(): void
        -addNorthernEuropeEdges(): void
        -addSouthernEuropeEdges(): void
        -addUkraineEdges(): void

        -addAsianGraphEdges(): void
        -addAfghanistanEdges(): void
        -addMiddleEastEdges(): void
        -addUralEdges(): void
        -addIndiaEdges(): void
        -addChinaEdges(): void
        -addSiberiaEdges(): void
        -addRemainingAsianGraphEdges(): void
        -addSiamEdges(): void
        -addMongoliaEdges(): void
        -addIrkutskEdges(): void
        -addYakutskEdges(): void
        -addJapanEdges(): void

        -addOceanicGraphEdges(): void
        -addIndonesiaGraphEdges(): void
        -addNewGuineaEdges(): void
        -addWesternAustraliaEdges(): void

        +initializePlayersList(playerOrder: List<PlayerColor>): boolean
        -handleErrorCheckingForOrderSize(playerOrder: List<PlayerColor>): void
        -handleErrorCheckingForOrderContents(playerOrder: List<PlayerColor>): void
        -initializePlayerColorToPlayerMap(playerColors: List<PlayerColor>): void

        ~shufflePlayers(): void
        -sortPlayersListByDieRoll(): void

        ~assignSetupArmiesToPlayers(): boolean
        -checkIfPlayersListIsEmpty(): void
        -handleArmyAssignment(numPlayersInGame: int): void

        +checkIfPlayerOwnsTerritory(relevantTerritory: TerritoryType, playerColor: PlayerColor): boolean
        +placeNewArmiesInTerritory(relevantTerritory: TerritoryType, numArmiesToPlace: int): boolean
        -checkIfGameIsInValidPhaseForAction(validPhases: Set<GamePhase>, errorMessage: String): void
        -handleValidPhaseParsing(relevantTerritory: TerritoryType, numArmiesToPlace: int): void

        -handleSetupPhaseArmyPlacement(relevantTerritory: TerritoryType, numArmiesToPlace: int): void
        -checkNumArmiesToPlaceIsValidForSetup(numArmiesToPlace: int): void
        -checkIfCurrentPlayerOwnsTerritory(relevantTerritory: TerritoryType): void
        -increaseNumArmiesInTerritory(relevantTerritory: TerritoryType, additionalArmies: int): void
        -decreaseNumArmiesCurrentPlayerHasToPlace(numArmiesToPlace: int): void
        -updateCurrentPlayer(): void
        -checkSetupPhaseEndCondition(): void

        ~calculatePlacementPhaseArmiesForCurrentPlayer(): int
        -getTerritoriesCurrentPlayerOwns(): Set<TerritoryType>
        -checkIfPlayerShouldExistOrGameIsOverWithTerritoryCount(numOwnedTerritories: int): void
        -calculateBonusForOwnedContinents(): int
        -increaseNumArmiesCurrentPlayerHasToPlace(numToIncreaseBy: int): void

        -handleScramblePhaseArmyPlacement(relevantTerritory: TerritoryType, numArmiesToPlace: int): void
        -checkIfTerritoryIsUnclaimed(relevantTerritory: TerritoryType): void
        -checkIfNumArmiesToPlaceIsValidForScramblePhase(numArmiesToPlace: int): void
        -checkIfPlayerHasEnoughArmiesToPlace(numArmiesToPlace: int): void
        -updateTerritoryObjectWithValidScrambleArguments(relevantTerritory: TerritoryType, numArmiesToPlace: int): void
        -addTerritoryToCurrentPlayerCollection(relevantTerritory: TerritoryType): void
        -checkScramblePhaseEndCondition(): void
        -calculateNumUnplacedArmiesLeft(): void

        -handlePlacementPhaseArmyPlacement(relevantTerritory: TerritoryType, numArmiesToPlace: int): void
        -checkIfPlayerIsHoldingTooManyCards(): void
        -checkIfNumArmiesToPlaceIsValidForPlacement(numArmiesToPlace: int): void
        -checkPlacementPhaseEndCondition(): void

        +tradeInCards(selectedCardsToTradeIn: Set<Card>): Set<TerritoryType>
        -checkForForcedTradeInForAttackPhase(): void
        -checkIfPlayerOwnsCards(givenCardSet: Set<Card>, currentPlayerObject: Player): void
        -addArmiesToPlayerStockpileIfValidSet(selectedCards: Set<Card>, playerObject: Player): Set<TerritoryType>
        -modifyPlayerObjectAndGamePhaseToAccountForTradeIn(playerObject: Player, numArmiesToReceive: int, selectedCards: Set<Card>): void

        +placeBonusArmies(territory: TerritoryType, possibilities: Set<TerritoryType>): void

        +moveArmiesBetweenFriendlyTerritories(sourceTerritory: TerritoryType, destTerritory: TerritoryType, numArmies: int): void
        -checkIfTerritoriesAreAdjacent(source: TerritoryType, dest: TerritoryType): void
        -checkIfPlayerOwnsBothSourceAndDestinationTerritories(source: TerritoryType, dest: TerritoryType): void
        -handleInputArmyValidation(sourceTerritory: TerritoryType, numArmiesToMove: int): void
        -checkIfInValidGamePhaseForMovement(): void
        -checkIfTerritoriesWereRecentlyAttacked(sourceTerritory: TerritoryType, destTerritory: TerritoryType): void
        -clearRecentlyAttackedTerritories(): void
        -decreaseNumArmiesInTerritory(territory: TerritoryType, numArmiesLost: int): void
        -handleFortifyPhaseEndingIfNecessary(): void

        +forceGamePhaseToEnd(): void
        -handleAttackPhaseEnding(): void
        -checkIfPlayerHasTooManyCardsAttackPhase(): void
        -handleFortifyPhaseEnding(): void

        ~claimCardForCurrentPlayerIfPossible(): void
        -addCardToCurrentPlayersCollection(): void

        +attackTerritory(sourceTerritory: TerritoryType, destTerritory: TerritoryType, numAttackers: int, numDefenders: int): int
        -handleErrorCasesForAttackingTerritory(sourceTerritory: TerritoryType, destTerritory: TerritoryType, numAttackers: int, numDefenders: int): void
        -checkIfNumAttackersIsValid(numAttackers: int): void
        -checkIfNumDefendersIsValid(numDefenders: int): void
        -checkIfGameIsInAttackPhase(): void
        -checkIfAppropriatePlayersOwnTerritories(source: TerritoryType, dest: TerritoryType): void
        -checkIfSourceTerritoryHasEnoughArmiesToSupportAttack(sourceTerritory: TerritoryType, numAttackers: int): void
        -checkIfDestTerritoryHasEnoughArmiesToSupportDefense(destTerritory: TerritoryType, numDefenders: int): void

        -storeRecentlyAttackedTerritories(source: TerritoryType, dest: TerritoryType): void
        -rollDiceForBattle(numAttackers: int, numDefenders: int): List<BattleResult>
        -handleArmyLosses(sourceTerritory: TerritoryType, destTerritory: TerritoryType, battleResults: List<BattleResult>): AttackConsequence
        -handleDefenderLosingTerritoryConsequences(sourceTerritory: TerritoryType, destTerritory: TerritoryType, numAttackers: int): void
        -handleAttackerTakingTerritory(territory: TerritoryType, numAttackers: int): void
        -getPlayerInControlOfTerritory(territory: TerritoryType): PlayerColor
        +handlePlayerLosingGameIfNecessary(potentiallyLosingPlayer: PlayerColor): void
        -playerOwnsAtLeastOneTerritory(player: PlayerColor): boolean
        -handlePlayerWinningGameIfNecessary(): void

        +getAttackerDiceRolls(): List<Integer>
        +getDefenderDiceRolls(): List<Integer>
        +getBattleResults(): List<BattleResult>
        +getIfCurrentPlayerCanClaimCard(): boolean
        +getRecentlyAttackedSource(): TerritoryType
        +getRecentlyAttackedDest(): TerritoryType
        +getCurrentPlayer(): PlayerColor
        +getCurrentGamePhase(): GamePhase
        +getPlayerOrder(): List<PlayerColor>
        +getDieRolls(): List<Integer>
        +getCurrentPlayerArmiesToPlace(): int
        +getNumberOfArmies(territoryType: TerritoryType): int
        +getCardsOwnedByPlayer(playerColor: PlayerColor): Set<Card>

        ~setNumArmiesForPlayer(playerColor: PlayerColor, numArmies: int): void
        ~setAbilityToClaimCard(): void
        ~setGamePhase(gamePhase: GamePhase): void
        ~setPlayerOrderList(playersList: List<PlayerColor>): void
        ~setCardsForPlayer(playerColor: PlayerColor, cardsPlayerOwns: Set<Card>): void
        ~setParser(parser: DieRollParser): void
        ~provideMockedPlayerObjects(mockedPlayers: List<Player>): void
        ~provideMockedTerritoryGraph(mockedGraph: TerritoryGraph): void
        ~provideMockedPlayersMap(mockedPlayersMap: Map<PlayerColor, Player>): void
        ~provideMockedTradeInParser(mockedParser: TradeInParser): void
        ~provideCurrentPlayerForTurn(currentlyGoingPlayer: PlayerColor): void
        ~provideMockedCardDeck(mockedDeck: RiskCardDeck): void
        ~provideDieRollParser(dieRollParser: DieRollParser): void
        ~getNumCardsForPlayer(playerColor: PlayerColor): int
        ~getPlayerMap(): Map<PlayerColor, Player>
        ~getNumArmiesByPlayerColor(playerColor: PlayerColor): int
        ~getClaimedTerritoriesForPlayer(playerInQuestion: PlayerColor): Set<TerritoryType>
        ~WorldDominationGameEngine()
        ~claimAllTerritoriesForCurrentPlayer(territoriesToClaim: Set<TerritoryType>): void
    }

    WorldDominationGameEngine --> "*" Player
    WorldDominationGameEngine --> "*" PlayerColor
    WorldDominationGameEngine --> DieRollParser
    WorldDominationGameEngine --> TradeInParser
    WorldDominationGameEngine --> RiskCardDeck
    WorldDominationGameEngine --> TerritoryGraph
    WorldDominationGameEngine ..> Continent
    WorldDominationGameEngine ..> Card
    WorldDominationGameEngine ..> AttackConsequence
    WorldDominationGameEngine --> GamePhase
    WorldDominationGameEngine ..> TerritoryType
    WorldDominationGameEngine ..> PlayerColor

    ~class Player {
        -{final} playerColor: PlayerColor
        -numArmiesToPlace: int
        -territories: Set<TerritoryType>
        -ownedCards: Set<Card>

        ~Player(playerColor: PlayerColor)
        ~ownsTerritory(territory: TerritoryType): boolean
        ~setNumArmiesToPlace(newAmount: int): void
        ~getNumArmiesToPlace(): int
        ~getColor(): PlayerColor
        ~addTerritoryToCollection(relevantTerritory: TerritoryType): void
        ~ownsAllGivenCards(cardsToRemove: Set<Card>): void

        ~setTerritories(territories: Set<TerritoryType>): void
        ~getTerritories(): Set<TerritoryType>
        ~Player()
        ~setOwnedCards(cardsPlayerOwns: Set<Card>): void
        ~getOwnedCards(): Set<Card>
        ~addCardsToCollection(cardToBeAdded: Set<Card>): void
        ~removeTerritoryFromCollection(territory: TerritoryType): void
    }

    Player --> PlayerColor
    Player --> "*" TerritoryType
    Player --> "*" Card

    +enum GamePhase {
        SCRAMBLE
        SETUP
        PLACEMENT
        ATTACK
        FORTIFY
        GAME_OVER

        +toString(): String
    }

    ~enum AttackConsequence {
        DEFENDER_LOSES_TERRITORY
        NO_CHANGE
    }

    ~class RiskCardDeck {
        -{static} {final} NUMBER_OF_WILD_CARDS: int
        -{static} {final} CARDS_PER_PIECE_TYPE: int
        -deckOfCards: List<Card>
        -{final} random: Random

        ~RiskCardDeck()
        ~RiskCardDeck(random: Random)
        ~initDeck(): boolean
        -addTerritoryCards(): void
        -addWildCards(): void
        ~drawCard(): Card
        ~shuffle(): boolean
        ~setDeck(deck: List<Card>): void
        ~isDeckEmpty(): boolean
    }

    ~class Die {
        -maximumPossibleRoll: int
        -minimumPossibleRoll: int
        ~Die(maximumPossibleRoll: int, minimumPossibleRoll: int)
        ~rollSingleDie(randomizer: Random): Integer
    }

    ~class DieRollParser {
        -{static} {final} MINIMUM_DIE_ROLL: int
        -{static} {final} MAXIMUM_DIE_ROLL: int
        -{static} {final} MINIMUM_AMOUNT_OF_SETUP_DICE: int
        -{static} {final} MAXIMUM_AMOUNT_OF_SETUP_DICE: int
        -{static} {final} MINIMUM_VALID_AMOUNT_OF_ATTACKER_OR_DEFENDER_DICE: int
        -{static} {final} MAXIMUM_VALID_AMOUNT_OF_DEFENDER_DICE: int
        -{static} {final} MAXIMUM_VALID_AMOUNT_OF_ATTACKER_DICE: int
        -{final} attackerDice: List<Die>
        -{final} defenderDice: List<Die>
        -{final} randomizer: Random
        -setupDie: Die

        ~DieRollParser()
        ~buildDiceLists(): boolean
        ~rollDiceToDeterminePlayerOrder(amountOfDiceToRoll: int): List<Integer>
        -buildSetupDie(setupDieUpperBound: int): void
        ~rollAttackerDice(amountOfDiceToRoll: int): List<Integer>
        ~rollDefenderDice(amountOfDiceToRoll: int): List<Integer>
        -validateRequestedAmountOfDiceToRollIsInRange(rolLType: String, requestedAmount: int, minAllowedAmount: int, maxAllowedAmount: int): void
        -rollDiceFromList(amountOfDiceToRoll: int, List<Die> listToUse)
        ~generateBattleResults(defenderRolls: List<Integer>, attackerRolls: List<Integer>): List<BattleResult>
        -validateListsAreNotEmpty(defenderRollsList: List<Integer>, attackerRollsList: List<Integer>): void
        -validateListsAreSortedProperly(defenderRollsList: List<Integer>, attackerRollsList: List<Integer>): void
        -calculateBattleResult(defenderRoll: Integer, attackerRoll: Integer): BattleResult
        ~validateSortIsInNonIncreasingOrder(toCheck: List<Integer>): boolean
        ~DieRollParser(randomizer: Random, attackerDice: List<Die>, defenderDice: List<Die>)
    }

    DieRollParser --> "*" Die
    DieRollParser ..> BattleResult

    +enum BattleResult {
        ATTACKER_VICTORY
        DEFENDER_VICTORY

        +toString(): String
    }

    +enum Continent {
        AFRICA
        ASIA
        EUROPE
        NORTH_AMERICA
        OCEANIA
        SOUTH_AMERICA

        -{final} associatedTerritories: Set<TerritoryType>
        -{final} continentBonus: int
        ~Continent(associatedTerritories: Set<TerritoryType>, continentArmyBonus: int)
        ~matchesContinentTerritories(playerTerritoriesInQuestion: Set<TerritoryType>): boolean
        +toString(): String
        ~getContinentBonusIfPlayerHasTerritories(setToPassIn: Set<TerritoryType>): int
    }

    ~class TradeInParser {
        -{static} {final} TRADE_IN_SET_LENGTH: int
        -{static} {final} MAXIMUM_NUMBER_OF_TRADES: int
        -{static} {final} ARMY_CALCULATION_OFFSET: int
        -{static} {final} STARTING_NUMBER_OF_ARMIES: int
        -{static} {final} ADDITIONAL_NUMBER_OF_ARMIES: int
        -{static} {final} STARTING_NUMBER_OF_ARMIES_AFTER_THRESHOLD: int
        -{static} {final} ADDITIONAL_NUMBER_OF_ARMIES_AFTER_THRESHOLD: int
        -setsTradedIn: int

        ~startTrade(cards: Set<Card>): int
        ~getMatchedTerritories(player: Player, cards: Set<Card>): Set<TerritoryType>
        -checkPlayerTerritories(player: Player, cards: Set<Card>): Set<TerritoryType>
        -checkTradeInState(cards: Set<Card>): void
        -hasOneOfEachType(cards: Set<Card>): boolean
        -hasThreeOfSameType(cards: Set<Card>): boolean
        -countPieceType(cards: Set<Card>, type: PieceType): long
        -hasWild(cards: Set<Card>): boolean
        ~setSetsTradedIn(setsTradedIn: int): void
    }

    TradeInParser .d.> Card
    TradeInParser ..> Player

    +enum PieceType {
        ARTILLERY
        CAVALRY
        INFANTRY

        +toString(): String
    }

    ~interface Card {
        +isWild(): boolean
        +matchesTerritory(territory: TerritoryType): boolean
        +matchesPieceType(pieceType: PieceType): boolean
    }

    ~class WildCard {
        +matchesTerritory(territory: TerritoryType): boolean
        +matchesPieceType(pieceType: PieceType): boolean
        +isWild(): boolean
    }

    note "matchesPieceType and isWild returns true, matchesTerritory returns false" as N1
    N1 .u. WildCard

    ~class TerritoryCard {
        -territoryType: TerritoryType
        -pieceType: PieceType
        ~TerritoryCard(territory: TerritoryType, piece: PieceType)
        ~matchesTerritory(territory: TerritoryType): boolean
        ~matchesPieceType(pieceType: PieceType): boolean
        ~isWild(): boolean
    }

    TerritoryCard --> PieceType
    TerritoryCard --> TerritoryType

    TerritoryCard ..|> Card
    WildCard ..|> Card
    RiskCardDeck --> "*" Card

    +enum TerritoryType {
        ALASKA
        ALBERTA
        CENTRAL_AMERICA
        ...
        WESTERN_AUSTRALIA

        +toString(): String
    }

    ~class TerritoryGraph {
        -territories: Map<TerritoryType, Set<Territory>>
        -territoryTypeToObject: Map<TerritoryType, Territory>

        ~getTerritory(territoryType: TerritoryType): Territory
        ~findAdjacentTerritories(territoryType: TerritoryType): Set<Territory>

        ~addNewTerritory(territory: Territory): boolean
        ~addNewAdjacency(startingTerritory: TerritoryType, endingTerritory: TerritoryType): boolean
        ~areTerritoriesAdjacent(startingTerritory: TerritoryType, endingTerritory: TerritoryType): boolean

        -isValidAdjacency(startingTerritory: TerritoryType, endingTerritory: TerritoryType): boolean

        ~addSetOfAdjacencies(keyToAddOn: TerritoryType, adjTerritories: Set<TerritoryType>): boolean
        -graphContainsAdjacencies(territoryType: TerritoryType, adjacencies: Set<TerritoryType>, currentAdjacencies: Set<TerritoryType>): boolean
        -graphHasAdjacencyMapping(adjacencies: Set<TerritoryType>, currentAdjacencies: Set<TerritoryType>): boolean
        -addAdjacenciesToGraph(territory: TerritoryType, adjacencies: Set<TerritoryType>, currentAdjacencies: Set<TerritoryType>): void
    }

    TerritoryGraph --> "*" Territory
    TerritoryGraph --> "*" TerritoryType

    ~class Territory {
        -territoryType: TerritoryType
        -playerInControl: PlayerColor
        -numArmiesPresent: int

        ~Territory(territoryType: TerritoryType)
        ~Territory(playerToBeInControl: Player, territoryType: TerritoryType)
        ~setPlayerInControl(newPlayer: Player): boolean
        ~setNumArmiesPresent(newAmount: int): boolean
        ~getNumArmiesPresent(): int
        ~getTerritoryType(): TerritoryType
        ~isOwnedByPlayer(playerToCheck: PlayerColor): boolean
    }

    Territory --> PlayerColor
    Territory --> TerritoryType

    +enum PlayerColor {
        SETUP
        BLACK
        RED
        YELLOW
        BLUE
        GREEN
        PURPLE

        +toString(): String
        +getColorString(): String
    }
}

presentation.AttackLogic --> domain.WorldDominationGameEngine
presentation.AttackLogic --> "2" domain.TerritoryType
presentation.AttackLogic --> domain.PlayerColor

presentation.FortifyLogic --> domain.WorldDominationGameEngine
presentation.FortifyLogic --> "2" domain.TerritoryType

presentation.GameMapScreenController --> domain.WorldDominationGameEngine
presentation.GameMapScreenController --> "*" domain.TerritoryType
presentation.GameMapScreenController ..> domain.GamePhase

presentation.PlayerSelectScreenController --> "*" domain.PlayerColor

presentation.PlayerShuffleScreenController --> "*" domain.PlayerColor

presentation.SceneController --> "*" domain.PlayerColor
presentation.SceneController --> domain.WorldDominationGameEngine

presentation.TradeInLogic --> domain.WorldDominationGameEngine
presentation.TradeInLogic --> domain.GamePhase
presentation.TradeInLogic --> "*" domain.TerritoryType
presentation.TradeInLogic ..> domain.Card

package datasource {
    +interface FileLoader {
        +open(fileName: String): boolean
        +getFileUrl(): URL
    }

    +class ImageFileLoader {
        -{static} {final} IMAGE_DIRECTORY: String

        +open(fileName: String): boolean
        -checkFileExistence(fileName: String, file: URL): void
        +getFileUrl(): URL
    }

    +class SceneFileLoader {
        -sceneFile: URL

        +open(fileName: String): boolean
        -checkFileExistence(file: URL): void
        +getFileUrl(): URL
    }

    +class StyleSheetLoader {
        -cssFile: URL

        +open(fileName: String): boolean
        -createFilePointer(fileName: String): URL
        -checkFileExistence(file: URL): void
        +getFileUrl(): URL
    }

    ImageFileLoader ..|> FileLoader
    SceneFileLoader ..|> FileLoader
    StyleSheetLoader ..|> FileLoader

    +class StringsBundleLoader {
        -{static} {final} BUNDLE_NAME: String
        -{static} {final} INSTANCE: StringsBundleLoader
        -localeName: String

        -openBundle(locale: String): boolean
        -getResourceBundle(): ResourceBundle
        +{static} open(locale: String): boolean
        +{static} getBundle(): ResourceBundle
    }
}

presentation.RiskApp ..> datasource.SceneFileLoader
presentation.RiskApp ..> datasource.StyleSheetLoader
presentation.RiskApp ..> datasource.ImageFileLoader

presentation.SceneController --> datasource.FileLoader
presentation.SceneController ..> datasource.StringsBundleLoader

domain.BattleResult ..> datasource.StringsBundleLoader
domain.Continent ..> datasource.StringsBundleLoader
domain.GamePhase ..> datasource.StringsBundleLoader
domain.PieceType ..> datasource.StringsBundleLoader
domain.PlayerColor ..> datasource.StringsBundleLoader
domain.TerritoryType ..> datasource.StringsBundleLoader

@enduml
