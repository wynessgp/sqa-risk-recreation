@startuml RiskDesign

package presentation {
    +class Main {
        +{static} main(args: String[]): void
        +start(): void
    }

    +interface GenericUI {
        +draw(): void
    }

    +class ConcreteUI {

    }

    ConcreteUI .u.|> GenericUI

    +interface GenericController {
        +receiveInput(): void
    }

    +class ConcreteController {

    }

    ConcreteController .u.|> GenericController

    +class PlayerDisplay {

    }


}

package domain {
    +abstract class GameRules {
        ~gamePhase: GamePhase
        ~gameGraph: TerritoryGraph
        ~tradeInChecker: TradeInManager
        ~deckManager: DeckManager
    }

    +class WorldDomination {

    }

    +class SecretMission {

    }

    +class CapitalRisk {

    }

    +enum GamePhase {
        GAME_START,
        SETUP,
        PLACEMENT,
        ATTACK,
        FORTIFY,
        GAME_OVER
    }

    GameRules --> GamePhase
    GameRules --> TerritoryGraph
    GameRules --> DeckManager
    GameRules --> TradeInManager
    CapitalRisk --|> GameRules
    SecretMission --|> GameRules
    WorldDomination --|> GameRules

    +class DeckManager {
        -deckOfCards: List<Card>
        +DeckManager()
        +drawCard(): Card
        +initDeck(): boolean
        -shuffle(): boolean
    }

    DeckManager -> "*" Card

    +class TradeInManager {
        -attemptedCards: Set<Card>
        -setsTradedInSoFar: int
        +startTrade(attemptedCards: Set<Card>): boolean
        -verifyValidCombo(): boolean
        -calculateNumNewPieces(): boolean
        -updateSetsTradedIn(): boolean
        -clearSavedSet(): boolean
    }

    TradeInManager -d-> "*" Card
    TradeInManager .d.> Card

    +class Player {
        -cards: Set<Card>
        -pieces: Set<Piece>
        -color: PlayerColor
    }

    Player -> "*" Piece
    Player -> "*" Card
    Player -> PlayerColor

    +class Piece {
        -pieceType: PieceType
        -location: Territory
    }

    +enum PieceType {
        ARTILLERY,
        CAVALRY,
        INFANTRY
    }

    Piece --> PieceType

    +interface Card {
        +isWild(): boolean
        +matchesTerritory(territory: TerritoryType): boolean
        +matchesPieceType(pieceType: PieceType): boolean
    }

    +class WildCard {
        +matchesTerritory(territory: TerritoryType): boolean
        +matchesPieceType(pieceType: PieceType): boolean
        +isWild(): boolean
    }

    note "matchesPieceType and isWild returns true, matchesTerritory returns false" as N1
    N1 .u. WildCard

    +class TerritoryCard {
        -territoryType: TerritoryType
        -pieceType: PieceType
        +matchesTerritory(territory: TerritoryType): boolean
        +matchesPieceType(pieceType: PieceType): boolean
        +isWild(): boolean
    }

    TerritoryCard ..|> Card
    WildCard ..|> Card
    TerritoryCard --> PieceType
    TerritoryCard --> TerritoryType

    +enum TerritoryType {
        ...
    }

    +class TerritoryGraph {
        -territoryKeys: List<TerritoryType>
        -territoryTypeToAdjacencies: Map<TerritoryType, Set<Territory>>
        +TerritoryGraph()
        +addNewKey(newKey: TerritoryType): boolean
        +addNewAdjacency(keyToAddOn: TerritoryType, adjTerritory: Territory): boolean
        ~addSetOfAdjacencies(keyToAddOn: TerritoryType, adjTerritories: Set<Territory>): boolean
        +removeAdjacency(keyToRemoveFrom: TerritoryType, adjTerritory: Territory): boolean
        +findAdjacentTerritories(givenTerritory: TerritoryType): Set<Territory>
    }

    TerritoryGraph --> "*" Territory
    TerritoryGraph --> "*" TerritoryType
    TerritoryGraph ..> Territory
    TerritoryGraph ..> TerritoryType

    +class Territory {
        -territoryType: TerritoryType
        // initialized to NEUTRAL
        -playerInControl: PlayerColor
        -numArmiesPresent: int
        +Territory(territoryType: TerritoryType)
        +setPlayerInControl(newPlayer: Player): boolean 
        +setNumArmiesPresent(newAmount: int): boolean
    }

    Territory --> PlayerColor
    Territory --> TerritoryType

    +enum PlayerColor {
        NEUTRAL,
        BLACK,
        RED,
        YELLOW,
        BLUE,
        GREEN,
        PURPLE
    }


}

package datasource {
    +interface StandardInput {
        +read(): Object
    }

    +class PictureLoader {
        +PictureLoader(filePath: String)
        +read(): Object
    }

    PictureLoader .u.|> StandardInput
}

@enduml

